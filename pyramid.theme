<?php 

/**
 * @file
 * Functions to support theming in the pyramidBaseTheme theme.
 */

 /**
 * Implements hook_preprocess_page().
 */
function pyramid_preprocess_page(&$variables) {
  // Get the configured breakpoints to switch header behavior Desktop Mobile.
  $breakpoints = \Drupal::service('breakpoint.manager')->getBreakpointsByGroup('pyramid');
  if (!empty($breakpoints)) {
    $media_queries = [];
    foreach ($breakpoints as $id => $breakpoint) {
      $media_queries[$id] = $breakpoint->getMediaQuery();
    }
    $variables['#attached']['drupalSettings']['pyramid']['breakpoints'] = $media_queries;
  }
}
/**
 * Implements theme_preprocess_menu().
 *
 * @todo remove the $label variable and load the correct Menu translation based on current langcode.
 */
function pyramid_preprocess_menu(&$variables, $hook) {
  // Populate menu title variable for Twig.
  $menu = \Drupal::service('entity_type.manager')->getStorage('menu')->load($variables['menu_name']);
  if (NULL != $menu) {
    $variables['menu_title'] = [
      '#markup' => \Drupal::translation()->translate('@label', ['@label' => $menu->label()]),
    ];
  }
  // Get menu items for the current language only.
  $menu_tree_translated = pyramid_base_get_multilingual_menu($variables['menu_name']);
  $variables['items'] = isset($menu_tree_translated['#items']) ? $menu_tree_translated['#items'] : [];
}

/**
 * Get the renderable array of a File field.
 *
 * @param Drupal\file\Entity\File $file
 *   The file entity.
 * @param string $image_style
 *   The name of image style.
 *
 * @return array
 *   Return the renderable array.
 */
function pyramid_render_field_image(File $file, $image_style = 'default', $responsive = FALSE) {
  $build = [];
  $image = \Drupal::service('image.factory')->get($file->getFileUri());
  if ($image->isValid()) {
    $uri = $file->getFileUri();
    $width = $image->getWidth();
    $height = $image->getHeight();
    $build = [
      '#theme' => $responsive ? 'responsive_image' : 'image_style',
      '#width' => $width,
      '#height' => $height,
      '#uri' => $uri,
      '#responsive_image_style_id' => $responsive ? $image_style : NULL,
      '#style_name' => $responsive ? NULL : $image_style,
    ];
    // Add the file entity to the cache dependencies.
    // This will clear our cache when this entity updates.
    $renderer = \Drupal::service('renderer');
    $renderer->addCacheableDependency($build, $file);
  }
  return $build;
}
